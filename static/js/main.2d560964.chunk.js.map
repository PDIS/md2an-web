{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["jsonxml","require","format","marked","he","useStyles","makeStyles","theme","appBar","borderBottom","palette","divider","toolbar","flexWrap","toolbarTitle","flexGrow","link","margin","spacing","md2an","input","references","debateSection","speakers","sections","replace","split","push","match","map","section","test","exec","line","type","hyperlink","first","console","log","last","narrative","children","speaker","p","speech","decode","smartypants","linkbefore","linkafter","_","uniq","TLCPerson","href","id","showAs","heading","xml","findTitle","App","classes","useState","values","setValues","title","setTitle","Fragment","CssBaseline","AppBar","position","color","elevation","className","Toolbar","Typography","variant","noWrap","autoFocus","onChange","event","output","target","value","style","background","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d560964.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport _ from 'lodash';\r\nimport css from './App.css'\r\n\r\nconst js2xmlparser = require('js2xmlparser');\r\nconst jsonxml = require('jsontoxml');\r\nconst format = require('xml-formatter');\r\nconst marked = require('marked');\r\nconst he = require('he');\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    borderBottom: `1px solid ${theme.palette.divider}`,\r\n  },\r\n  toolbar: {\r\n    flexWrap: 'wrap',\r\n  },\r\n  toolbarTitle: {\r\n    flexGrow: 1,\r\n  },\r\n  link: {\r\n    margin: theme.spacing(1, 1.5),\r\n  },\r\n}))\r\n\r\nconst md2an = (input) => {\r\n  let references = []\r\n  let debateSection = []\r\n  let speakers = []\r\n  let sections = input.replace(/\\n:::info\\n[\\d\\D]*?\\n:::\\n/, '').split('###')\r\n  debateSection.push({'heading':(input.match(/^#* (.*)/) || [])[1]})\r\n  sections.map( section => {\r\n    // first section = ''\r\n    if (! /\\S/.test(section)) { return }\r\n    // info section\r\n    if (/🌐|📅|🏡/.exec(section)) {\r\n      let lines = section.split(/\\n+/)\r\n      lines.map( line => {\r\n        if (/(?=.*>)(?=.*\\[)(?=.*（).*/.exec(line)) {\r\n          let type = line.match(/\\[(.*?)\\]/)[1]\r\n          let hyperlink = line.match(/\\((.*?)\\)/)[1]\r\n          let first = line.match(/> (.*?)\\[/)[1]\r\n          console.log(line)\r\n          console.log(line.match(/\\)(.*?)）/))\r\n          let last = line.match(/\\)(.*?)）/)[0].replace(')','')\r\n          let narrative = {\r\n            'name': 'narrative',\r\n            children: [\r\n              {\r\n                'p': {\r\n                  'i': `${first}<a href=\"${hyperlink}\">${type}</a>${last}`\r\n                }\r\n              }\r\n            ]\r\n          }\r\n          debateSection.push(narrative)\r\n          return\r\n        }\r\n      })\r\n      return\r\n    }\r\n    let speaker = (section.match(/ (.*?)[:：]\\n/) || [])[1]\r\n    // speaker sections\r\n    if (speaker) {\r\n      let context = section.replace(/ (.*?)[:：]\\n/, '')\r\n      context.split(/[\\r\\n]{2,}/).map(p => {\r\n        if (!/\\S/.test(p)) { return }\r\n        if (/^>/.exec(p)) {\r\n          let narrative = {\r\n            'name': 'narrative',\r\n            children: [\r\n              {\r\n                'p': {\r\n                  'i': p.replace(/>/,'').replace(/\\s+/,'')\r\n                }\r\n              }\r\n            ]\r\n          }\r\n          debateSection.push(narrative)\r\n          return\r\n        }\r\n        let speech = {\r\n          'name': 'speech',\r\n          'attrs': { \r\n            'by': '#' + speaker \r\n          },\r\n          children: [\r\n            {\r\n              'p': he.decode(marked(p.replace(/^[\\r\\n]+/, ''), { smartypants: true })).replace(/^\\s*<p>\\s*|\\s*<\\/p>\\s*$/g, ''),\r\n            }\r\n          ]\r\n        }\r\n        if (/<a href=\"/.test(speech.children[0].p)) {\r\n          let linkbefore = speech.children[0].p.match(/<a href(.*?)>/)[0]\r\n          let linkafter = linkbefore.replace('&', '&#x26;')\r\n          speech.children[0].p = speech.children[0].p.replace(linkbefore, linkafter)\r\n        }\r\n        debateSection.push(speech)\r\n      })\r\n      speakers.push(speaker)\r\n    }\r\n  })\r\n  speakers = _.uniq(speakers)\r\n  speakers.map( speaker => {\r\n    let TLCPerson = {\r\n      'name': 'TLCPerson',\r\n      'attrs': { \r\n        href: \"/ontology/person/::/\" + speaker,\r\n        id: speaker,\r\n        showAs: speaker,\r\n      },\r\n    }\r\n    references.push(TLCPerson)\r\n  })\r\n  if (/Office Hour_/.test(debateSection[0].heading)) {\r\n    let heading = debateSection[0].heading.replace(/_[^_]*$/, '')\r\n    debateSection[0].heading = debateSection[0].heading.replace(/.*Office Hour_/, '')\r\n    debateSection = [{'heading': heading}, {'debateSection': debateSection}]\r\n  }\r\n  let xml = jsonxml({\r\n    'akomaNtoso':{\r\n      'debate': {\r\n        'meta': { \r\n          references \r\n        },\r\n        'debateBody': \r\n        { \r\n          'debateSection': debateSection\r\n        }\r\n      }\r\n    }\r\n  }, {'xmlHeader': true})\r\n  let output = format(xml)\r\n  return output\r\n}\r\n\r\nconst findTitle  = (input) => {\r\n  return (input.match(/^#* (.*)/) || [])[1].replace(/\\s/g, '-').replace(/Office-Hour_.*/, 'Office-Hour') + '.an.xml'\r\n}\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [values, setValues] = useState('');\r\n  const [title, setTitle] = useState('md2an');\r\n  const handleChange = a => event => {\r\n    let output = md2an(event.target.value)\r\n    let title = findTitle(event.target.value)\r\n    setValues(output)\r\n    setTitle(title)\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar position=\"static\" color=\"default\" elevation={0} className={classes.appBar} >\r\n        <Toolbar className={classes.toolbar}>\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.toolbarTitle}>\r\n            {title}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n        <textarea autoFocus id=\"input\" onChange={handleChange()} style={{background: '#ddd'}}></textarea>\r\n        <textarea id=\"output\" value={values}></textarea>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}