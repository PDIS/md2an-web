{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["js2xmlparser","require","marked","he","useStyles","makeStyles","theme","appBar","borderBottom","palette","divider","toolbar","flexWrap","toolbarTitle","flexGrow","link","margin","spacing","md2an","input","references","debateSection","speakers","sections","replace","split","heading","match","map","section","test","exec","line","type","narrative","push","speaker","p","speech","decode","smartypants","_","uniq","TLCPerson","href","id","showAs","an","output","parse","findTitle","App","classes","useState","values","setValues","title","setTitle","Fragment","CssBaseline","AppBar","position","color","elevation","className","Toolbar","Typography","variant","noWrap","autoFocus","onChange","event","target","value","style","background","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17d99e0b.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport _ from 'lodash';\r\nimport GitHubLogin from 'github-login';\r\nimport css from './App.css'\r\nconst js2xmlparser = require('js2xmlparser');\r\nconst marked = require('marked');\r\nconst he = require('he');\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    borderBottom: `1px solid ${theme.palette.divider}`,\r\n  },\r\n  toolbar: {\r\n    flexWrap: 'wrap',\r\n  },\r\n  toolbarTitle: {\r\n    flexGrow: 1,\r\n  },\r\n  link: {\r\n    margin: theme.spacing(1, 1.5),\r\n  },\r\n}))\r\n\r\nconst onSuccess = response => console.log(response);\r\nconst onFailure = response => console.error(response);\r\n\r\nconst md2an = (input) => {\r\n  let references = {'TLCPerson': []}\r\n  let debateSection = {'heading':'','narrative':[],'speech':[]}\r\n  let speakers = []\r\n  let sections = input.replace(/\\n:::info\\n[\\d\\D]*?\\n:::\\n/, '').split('###')\r\n  debateSection.heading = (input.match(/^#* (.*)/) || [])[1]\r\n  sections.map( section => {\r\n    // first section = ''\r\n    if (! /\\S/.test(section)) { return }\r\n    // info section\r\n    if (/üåê|üìÖ|üè°/.exec(section)) {\r\n      let lines = section.split(/\\n+/)\r\n      lines.map( line => {\r\n        if (/(?=.*>)(?=.*\\[)(?=.*Ôºà).*/.exec(line)) {\r\n          let type = line.match(/\\[(.*?)\\]/)[1]\r\n          let narrative = {\r\n            'p': {\r\n              'i': 'ÔºàË´ãÈªûÈÅ∏ <a href=\"' + line.match(/\\((.*?)\\)/)[1] + '\">' + type + '</a> ÂèÉËÄÉÔºâ'\r\n            }\r\n          }\r\n          debateSection.narrative.push(narrative)\r\n          return\r\n        }\r\n      })\r\n    }\r\n    let speaker = (section.match(/ (.*?)[:Ôºö]\\n/) || [])[1]\r\n    // speaker sections\r\n    if (speaker) {\r\n      let context = section.replace(/ (.*?)[:Ôºö]\\n/, '')\r\n      context.split(/[\\r\\n]{2,}/).map(p => {\r\n        if (!/\\S/.test(p)) { return }\r\n        let speech = {\r\n         '@': { \r\n           'by': '#' + speaker \r\n         },\r\n         'p': he.decode(marked(p.replace(/^[\\r\\n]+/, ''), { smartypants: true })).replace(/^\\s*<p>\\s*|\\s*<\\/p>\\s*$/g, '')\r\n        }\r\n        debateSection.speech.push(speech)\r\n      })\r\n      speakers.push(speaker)\r\n    }\r\n  })\r\n  speakers = _.uniq(speakers)\r\n  speakers.map( speaker => {\r\n    let TLCPerson = {\r\n      '@': { \r\n        href: \"/ontology/person/::/\" + speaker,\r\n        id: speaker,\r\n        showAs: speaker,\r\n      },\r\n    }\r\n    references.TLCPerson.push(TLCPerson)\r\n  })\r\n  if (/Office Hour_/.test(debateSection.heading)) {\r\n    let heading = debateSection.heading.replace(/_[^_]*$/, '')\r\n    debateSection.heading = debateSection.heading.replace(/.*Office Hour_/, '')\r\n    debateSection = { 'heading': heading, 'debateSection': debateSection }\r\n  }\r\n  let an = { \r\n    'debate': {\r\n        'meta': { \r\n          references \r\n      },\r\n      'debateBody': \r\n      { \r\n        'debateSection': debateSection\r\n      }\r\n    }\r\n  }\r\n  let output = js2xmlparser.parse('akomaNtoso', an)\r\n  output = output.replace(/&lt;/g, '<')\r\n  return output\r\n}\r\n\r\nconst findTitle  = (input) => {\r\n  return (input.match(/^#* (.*)/) || [])[1].replace(/\\s/g, '-') + '.an.xml'\r\n}\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [values, setValues] = useState('');\r\n  const [title, setTitle] = useState('md2an');\r\n  const handleChange = a => event => {\r\n    let output = md2an(event.target.value)\r\n    let title = findTitle(event.target.value)\r\n    setValues(output)\r\n    setTitle(title)\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar position=\"static\" color=\"default\" elevation={0} className={classes.appBar} >\r\n        <Toolbar className={classes.toolbar}>\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.toolbarTitle}>\r\n            {title}\r\n          </Typography>\r\n{/*           <Button href=\"#\" color=\"primary\" variant=\"outlined\" className={classes.link}>\r\n            Submit\r\n          </Button>\r\n          <GitHubLogin clientId=\"7a7d8d6ba2a6f5847e5c\"\r\n            buttonText=\"Login\"\r\n            className=\"MuiButtonBase-root MuiButton-root makeStyles-link-4 MuiButton-outlined MuiButton-outlinedPrimary\"\r\n            onSuccess={onSuccess}\r\n            onFailure={onFailure}\r\n            redirectUri=\"http://localhost:3000/\"\r\n          /> */}\r\n        </Toolbar>\r\n      </AppBar>\r\n        <textarea autoFocus id=\"input\" onChange={handleChange()} style={{background: '#ddd'}}></textarea>\r\n        <textarea id=\"output\" value={values}></textarea>\r\n        {/* <Grid container spacing={1}>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              id=\"input\"\r\n              label=\"INPUT\"\r\n              onChange={handleChange()}\r\n              margin=\"normal\"\r\n              multiline\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              autoFocus={true} \r\n            />\r\n            <TextField\r\n              id=\"output\"\r\n              label=\"OUTPUT\"\r\n              margin=\"normal\"\r\n              multiline\r\n              fullWidth\r\n              value={values}\r\n              variant=\"outlined\"\r\n              autoFocus={true} \r\n            />\r\n          </Grid>\r\n        </Grid> */}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}