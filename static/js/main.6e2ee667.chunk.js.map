{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["js2xmlparser","require","md2an","input","references","debateSection","speakers","split","map","section","includes","heading","match","n","exec","type","narrative","push","speaker","speech","replace","_","uniq","TLCPerson","href","id","showAs","an","output","parse","App","useState","values","setValues","Container","maxWidth","Grid","container","spacing","item","xs","md","TextField","label","onChange","event","target","value","margin","multiline","fullWidth","variant","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAMMA,EAAeC,EAAQ,IAEvBC,EAAQ,SAACC,GACb,IAAIC,EAAa,CAAC,UAAa,IAC3BC,EAAgB,CAAC,QAAU,GAAG,UAAY,GAAG,OAAS,IACtDC,EAAW,GACAH,EAAMI,MAAM,OAClBC,IAAK,SAAAC,GACZ,GAAgB,KAAZA,EACF,GAAIA,EAAQC,SAAS,4BAAS,CAE5B,GADAL,EAAcM,QAAUF,EAAQG,MAAM,WAAW,GAC7CH,EAAQC,SAAS,KACFD,EAAQF,MAAM,KACpBC,IAAK,SAAAK,GACd,GAAI,eAAKC,KAAKD,GAAI,CAChB,IAAIE,EAAOF,EAAED,MAAM,aAAa,GAC5BI,EAAY,CACd,EAAK,CACH,EAAK,qCAAmBH,EAAED,MAAM,aAAa,GAAK,KAAOG,EAAO,4BAGpEV,EAAcW,UAAUC,KAAKD,UAKhC,CACH,IAAIE,EAAUT,EAAQG,MAAM,gBAAW,GAEnCO,EAAS,CACX,IAAK,CACH,GAAM,IAAMD,GAEd,EALa,gBAAYJ,KAAKL,GAAS,GAAGW,QAAQ,UAAW,KAO/Df,EAAcc,OAAOF,KAAKE,GAC1Bb,EAASW,KAAKC,OAIpBZ,EAAWe,IAAEC,KAAKhB,IACTE,IAAK,SAAAU,GACZ,IAAIK,EAAY,CACd,IAAK,CACHC,KAAM,uBAAyBN,EAC/BO,GAAIP,EACJQ,OAAQR,IAGZd,EAAWmB,UAAUN,KAAKM,KAE5B,IAAII,EAAK,CACP,OAAU,CACN,KAAQ,CACNvB,cAEJ,WACA,CACE,iBAAkBC,KAIpBuB,EAAS5B,EAAa6B,MAAM,aAAcF,GAE9C,OADAC,EAASA,EAAOR,QAAQ,QAAS,MAwCpBU,MApCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,KAMb,OACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CACEjB,GAAG,QACHkB,MAAM,QACNC,SAXgB,SAAAC,GACxB,IAAIjB,EAAS1B,EAAM2C,EAAMC,OAAOC,OAChCd,EAAUL,IAUFoB,OAAO,SACPC,WAAS,EACTC,WAAS,EACTC,QAAQ,cAGZ,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CACEjB,GAAG,SACHkB,MAAM,SACNK,OAAO,SACPC,WAAS,EACTC,WAAS,EACTH,MAAOf,EACPmB,QAAQ,iBCzFAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3C,MACvB,2DCbN4C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6e2ee667.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport _ from 'lodash';\n/* import css from './App.css' */\nconst js2xmlparser = require('js2xmlparser');\n\nconst md2an = (input) => {\n  let references = {'TLCPerson': []}\n  let debateSection = {'heading':'','narrative':[],'speech':[]}\n  let speakers = []\n  let sections = input.split('###')\n  sections.map( section => {\n    if (section !== '') {\n      if (section.includes('開始記錄')) {\n        debateSection.heading = section.match(/ (.*?) /)[1]\n        if (section.includes('>')) {\n          let narratives = section.split('>')\n          narratives.map( n => {\n            if (/🌈/.exec(n)) {\n              let type = n.match(/\\[(.*?)\\]/)[1]\n              let narrative = {\n                'p': {\n                  'i': '（請點選 <a href=\"' + n.match(/\\((.*?)\\)/)[1] + '\">' + type + '</a> 參考）'\n                }\n              }\n              debateSection.narrative.push(narrative)\n            }\n          })     \n        }\n      }\n      else {\n        let speaker = section.match(/ (.*?)：/)[1]\n        let context = (/([^：]*)$/).exec(section)[0].replace(/[\\r\\n]/g, '')\n        let speech = {\n          '@': { \n            'by': '#' + speaker \n          },\n          'p': context\n        }\n        debateSection.speech.push(speech)\n        speakers.push(speaker)\n      }\n    }\n  })\n  speakers = _.uniq(speakers)\n  speakers.map( speaker => {\n    let TLCPerson = {\n      '@': { \n        href: \"/ontology/person/::/\" + speaker,\n        id: speaker,\n        showAs: speaker,\n      },\n    }\n    references.TLCPerson.push(TLCPerson)\n  })\n  let an = { \n    'debate': {\n        'meta': { \n          references \n      },\n      'debateBody': \n      { \n        'debate-section': debateSection\n      }\n    }\n  }\n  let output = js2xmlparser.parse('akomaNtoso', an)\n  output = output.replace(/&lt;/g, '<')\n  return output\n}\n\nfunction App() {\n  const [values, setValues] = useState('');\n  const handleChange = a => event => {\n    let output = md2an(event.target.value)\n    setValues(output)\n  };\n  return (\n    <Container maxWidth=\"xl\">\n      <Grid container spacing={1}>\n        <Grid item xs={12} md={6}>\n          <TextField\n            id=\"input\"\n            label=\"INPUT\"\n            onChange={handleChange()}\n            margin=\"normal\"\n            multiline\n            fullWidth\n            variant=\"outlined\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <TextField\n            id=\"output\"\n            label=\"OUTPUT\"\n            margin=\"normal\"\n            multiline\n            fullWidth\n            value={values}\n            variant=\"outlined\"\n          />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}