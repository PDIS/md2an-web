{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["js2xmlparser","require","useStyles","makeStyles","theme","appBar","borderBottom","palette","divider","toolbar","flexWrap","toolbarTitle","flexGrow","link","margin","spacing","md2an","input","references","debateSection","speakers","split","map","section","exec","heading","match","n","type","narrative","push","speaker","speech","replace","_","uniq","TLCPerson","href","id","showAs","an","output","parse","App","classes","useState","values","setValues","Fragment","AppBar","position","color","elevation","className","Toolbar","Typography","variant","noWrap","Button","Container","maxWidth","Grid","container","item","xs","md","TextField","label","onChange","event","target","value","multiline","fullWidth","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d75cf4a2.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport _ from 'lodash';\r\n/* import css from './App.css' */\r\nconst js2xmlparser = require('js2xmlparser');\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    borderBottom: `1px solid ${theme.palette.divider}`,\r\n  },\r\n  toolbar: {\r\n    flexWrap: 'wrap',\r\n  },\r\n  toolbarTitle: {\r\n    flexGrow: 1,\r\n  },\r\n  link: {\r\n    margin: theme.spacing(1, 1.5),\r\n  },\r\n}))\r\n\r\nconst md2an = (input) => {\r\n  let references = {'TLCPerson': []}\r\n  let debateSection = {'heading':'','narrative':[],'speech':[]}\r\n  let speakers = []\r\n  let sections = input.split('###')\r\n  sections.map( section => {\r\n    // first section = ''\r\n    if (section === '') {\r\n      return\r\n    }\r\n    // info section\r\n    if (/ÈñãÂßãË®òÈåÑ/.exec(section)) {\r\n      debateSection.heading = section.match(/ (.*?) /)[1]\r\n      if (/\\>/.exec(section)) {\r\n        let narratives = section.split('>')\r\n        narratives.map( n => {\r\n          if (/üåà/.exec(n)) {\r\n            let type = n.match(/\\[(.*?)\\]/)[1]\r\n            let narrative = {\r\n              'p': {\r\n                'i': 'ÔºàË´ãÈªûÈÅ∏ <a href=\"' + n.match(/\\((.*?)\\)/)[1] + '\">' + type + '</a> ÂèÉËÄÉÔºâ'\r\n              }\r\n            }\r\n            debateSection.narrative.push(narrative)\r\n          }\r\n        })     \r\n      }\r\n    }\r\n    // speaker sections\r\n    else {\r\n      let speaker = section.match(/ (.*?)Ôºö/)[1]\r\n      let context = (/([^Ôºö]*)$/).exec(section)[0].replace(/[\\r\\n]/g, '')\r\n      let speech = {\r\n        '@': { \r\n          'by': '#' + speaker \r\n        },\r\n        'p': context\r\n      }\r\n      debateSection.speech.push(speech)\r\n      speakers.push(speaker)\r\n    }\r\n  })\r\n  speakers = _.uniq(speakers)\r\n  speakers.map( speaker => {\r\n    let TLCPerson = {\r\n      '@': { \r\n        href: \"/ontology/person/::/\" + speaker,\r\n        id: speaker,\r\n        showAs: speaker,\r\n      },\r\n    }\r\n    references.TLCPerson.push(TLCPerson)\r\n  })\r\n  let an = { \r\n    'debate': {\r\n        'meta': { \r\n          references \r\n      },\r\n      'debateBody': \r\n      { \r\n        'debate-section': debateSection\r\n      }\r\n    }\r\n  }\r\n  let output = js2xmlparser.parse('akomaNtoso', an)\r\n  output = output.replace(/&lt;/g, '<')\r\n  return output\r\n}\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [values, setValues] = useState('');\r\n  const handleChange = a => event => {\r\n    let output = md2an(event.target.value)\r\n    setValues(output)\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\" color=\"default\" elevation={0} className={classes.appBar} >\r\n        <Toolbar className={classes.toolbar}>\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.toolbarTitle}>\r\n            md2an\r\n          </Typography>\r\n          <Button href=\"#\" color=\"primary\" variant=\"outlined\" className={classes.link}>\r\n            Submit\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container maxWidth=\"xl\">\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} md={6}>\r\n            <TextField\r\n              id=\"input\"\r\n              label=\"INPUT\"\r\n              onChange={handleChange()}\r\n              margin=\"normal\"\r\n              multiline\r\n              fullWidth\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <TextField\r\n              id=\"output\"\r\n              label=\"OUTPUT\"\r\n              margin=\"normal\"\r\n              multiline\r\n              fullWidth\r\n              value={values}\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}