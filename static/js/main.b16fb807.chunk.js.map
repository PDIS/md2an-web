{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["js2xmlparser","require","marked","he","useStyles","makeStyles","theme","appBar","borderBottom","palette","divider","toolbar","flexWrap","toolbarTitle","flexGrow","link","margin","spacing","onSuccess","response","console","log","onFailure","error","md2an","input","references","debateSection","speakers","sections","replace","split","heading","match","map","section","test","exec","n","type","narrative","push","speaker","p","speech","decode","smartypants","_","uniq","TLCPerson","href","id","showAs","an","output","parse","App","classes","useState","values","setValues","Fragment","AppBar","position","color","elevation","className","Toolbar","Typography","variant","noWrap","Button","clientId","buttonText","redirectUri","Container","maxWidth","Grid","container","item","xs","TextField","label","onChange","event","target","value","multiline","fullWidth","autoFocus","rows","rowsMax","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b16fb807.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport _ from 'lodash';\nimport GitHubLogin from 'github-login';\n/* import css from './App.css' */\nconst js2xmlparser = require('js2xmlparser');\nconst marked = require('marked');\nconst he = require('he');\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  toolbar: {\n    flexWrap: 'wrap',\n  },\n  toolbarTitle: {\n    flexGrow: 1,\n  },\n  link: {\n    margin: theme.spacing(1, 1.5),\n  },\n}))\n\nconst onSuccess = response => console.log(response);\nconst onFailure = response => console.error(response);\n\nconst md2an = (input) => {\n  let references = {'TLCPerson': []}\n  let debateSection = {'heading':'','narrative':[],'speech':[]}\n  let speakers = []\n  let sections = input.replace(/\\n:::info\\n[\\d\\D]*?\\n:::\\n/, '').split('###')\n  debateSection.heading = (input.match(/^#* (.*)/) || [])[1]\n  sections.map( section => {\n    // first section = ''\n    if (! /\\S/.test(section)) { return }\n    // info section\n    if (/ÈñãÂßãË®òÈåÑ/.exec(section)) {\n      if (/>/.exec(section)) {\n        let narratives = section.split('>')\n        narratives.map( n => {\n          if (/üåà/.exec(n)) {\n            let type = n.match(/\\[(.*?)\\]/)[1]\n            let narrative = {\n              'p': {\n                'i': 'ÔºàË´ãÈªûÈÅ∏ <a href=\"' + n.match(/\\((.*?)\\)/)[1] + '\">' + type + '</a> ÂèÉËÄÉÔºâ'\n              }\n            }\n            debateSection.narrative.push(narrative)\n          }\n        })     \n      }\n      return\n    }\n\n    let speaker = (section.match(/ (.*?)[:Ôºö]\\n/) || [])[1]\n    // speaker sections\n    if (speaker) {\n      let context = section.replace(/ (.*?)[:Ôºö]\\n/, '')\n      context.split(/[\\r\\n]{2,}/).map(p => {\n        if (!/\\S/.test(p)) { return }\n        let speech = {\n         '@': { \n           'by': '#' + speaker \n         },\n         'p': he.decode(marked(p.replace(/[\\r\\n]/g, ''), { smartypants: true })).replace(/^\\s*<p>\\s*|\\s*<\\/p>\\s*$/g, '')\n        }\n        debateSection.speech.push(speech)\n      })\n      speakers.push(speaker)\n    }\n  })\n  speakers = _.uniq(speakers)\n  speakers.map( speaker => {\n    let TLCPerson = {\n      '@': { \n        href: \"/ontology/person/::/\" + speaker,\n        id: speaker,\n        showAs: speaker,\n      },\n    }\n    references.TLCPerson.push(TLCPerson)\n  })\n  let an = { \n    'debate': {\n        'meta': { \n          references \n      },\n      'debateBody': \n      { \n        'debateSection': debateSection\n      }\n    }\n  }\n  let output = js2xmlparser.parse('akomaNtoso', an)\n  output = output.replace(/&lt;/g, '<')\n  return output\n}\n\nfunction App() {\n  const classes = useStyles();\n  const [values, setValues] = useState('');\n  const handleChange = a => event => {\n    let output = md2an(event.target.value)\n    setValues(output)\n  };\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\" color=\"default\" elevation={0} className={classes.appBar} >\n        <Toolbar className={classes.toolbar}>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.toolbarTitle}>\n            md2an\n          </Typography>\n          <Button href=\"#\" color=\"primary\" variant=\"outlined\" className={classes.link}>\n            Submit\n          </Button>\n          <GitHubLogin clientId=\"7a7d8d6ba2a6f5847e5c\"\n            buttonText=\"Login\"\n            className=\"MuiButtonBase-root MuiButton-root makeStyles-link-4 MuiButton-outlined MuiButton-outlinedPrimary\"\n            onSuccess={onSuccess}\n            onFailure={onFailure}\n            redirectUri=\"http://localhost:3000/\"\n          />\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth=\"xl\">\n        <Grid container spacing={1}>\n          <Grid item xs={12}>\n            <TextField\n              id=\"input\"\n              label=\"INPUT\"\n              onChange={handleChange()}\n              margin=\"normal\"\n              multiline\n              fullWidth\n              variant=\"outlined\"\n              autoFocus={true} \n              rows={15}\n              rowsMax={15}\n            />\n            <TextField\n              id=\"output\"\n              label=\"OUTPUT\"\n              margin=\"normal\"\n              multiline\n              fullWidth\n              value={values}\n              variant=\"outlined\"\n              autoFocus={true} \n              rows={15}\n              rowsMax={15}\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}